var rp=require("request-promise"),Promise=require("bluebird"),xml2js=require("xml2js"),parser=new xml2js.Parser,util=require("util");module.exports=function(e){function t(){n=this,n.endpoints={feeds:"https://feeds.finance.yahoo.com/rss/2.0/headline?s=%s&region=US&lang=en-US",historicalData:"https://query.yahooapis.com/v1/public/yql?q=%s&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",quote:"https://query.yahooapis.com/v1/public/yql?q=%s&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys",search:"http://d.yimg.com/aq/autoc?query=%s&region=US&lang=en-US"}}var n;return t.prototype={getHeadlines:function(t){var o=util.format(n.endpoints.feeds,t);return new Promise(function(t,n){e(o).then(function(e){parser.parseString(e,function(e,o){e?n(e):t({headlines:o.rss.channel[0].item})})}).catch(n)})},getQuote:function(t){var o=util.format('select * from yahoo.finance.quotes where symbol in ("%s")',t),r=util.format(n.endpoints.quote,encodeURIComponent(o));return new Promise(function(t,n){e(r,{json:!0}).then(function(e){t(e.query.results)}).catch(n)})},getHistoricalData:function(t,o,r){var s=util.format('select * from yahoo.finance.historicaldata where symbol = "%s" and startDate = "%s" and endDate = "%s"',t,o,r),a=util.format(n.endpoints.historicalData,encodeURIComponent(s));return new Promise(function(t,n){e(a,{json:!0}).then(function(e){t({data:e.query.results.quote})}).catch(n)})},ticker:function(t){var o=util.format(n.endpoints.search,encodeURIComponent(t));return new Promise(function(t,n){e(o,{json:!0}).then(function(e){t({search:e.ResultSet.Query,results:e.ResultSet.Result||[]})}).catch(n)})}},t}(rp);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInlhaG9vLmZpbmFuY2UuanMiXSwibmFtZXMiOlsicnAiLCJyZXF1aXJlIiwiUHJvbWlzZSIsInhtbDJqcyIsInBhcnNlciIsIlBhcnNlciIsInV0aWwiLCJtb2R1bGUiLCJleHBvcnRzIiwiciIsIllhaG9vRmluYW5jZUFQSSIsInNlbGYiLCJ0aGlzIiwiZW5kcG9pbnRzIiwiZmVlZHMiLCJoaXN0b3JpY2FsRGF0YSIsInF1b3RlIiwic2VhcmNoIiwicHJvdG90eXBlIiwiZ2V0SGVhZGxpbmVzIiwidGlja2VyIiwidXJsIiwiZm9ybWF0IiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJ4bWwiLCJwYXJzZVN0cmluZyIsImVyciIsImpzIiwiaGVhZGxpbmVzIiwicnNzIiwiY2hhbm5lbCIsIml0ZW0iLCJjYXRjaCIsImdldFF1b3RlIiwicXVlcnkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqc29uIiwicmVzIiwicmVzdWx0cyIsImdldEhpc3RvcmljYWxEYXRhIiwic3RhcnQiLCJlbmQiLCJkYXRhIiwiUmVzdWx0U2V0IiwiUXVlcnkiLCJSZXN1bHQiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLElBQUtDLFFBQVEsbUJBQ2JDLFFBQVVELFFBQVEsWUFDbEJFLE9BQVNGLFFBQVEsVUFDakJHLE9BQVMsR0FBSUQsUUFBT0UsT0FDcEJDLEtBQU9MLFFBQVEsT0FFbkJNLFFBQU9DLFFBQVUsU0FBVUMsR0FHekIsUUFBU0MsS0FDUEMsRUFBT0MsS0FFUEQsRUFBS0UsV0FDSEMsTUFBTyw2RUFDUEMsZUFBZ0IsbUlBQ2hCQyxNQUFPLGtIQUNQQyxPQUFRLDREQVRaLEdBQUlOLEVBdUVKLE9BMURBRCxHQUFnQlEsV0FDZEMsYUFBYyxTQUFTQyxHQUNyQixHQUFJQyxHQUFNZixLQUFLZ0IsT0FBT1gsRUFBS0UsVUFBVUMsTUFBT00sRUFFNUMsT0FBTyxJQUFJbEIsU0FBUSxTQUFTcUIsRUFBU0MsR0FDbkNmLEVBQUVZLEdBQ0NJLEtBQUssU0FBU0MsR0FDYnRCLE9BQU91QixZQUFZRCxFQUFLLFNBQVNFLEVBQUtDLEdBQ2pDRCxFQUFLSixFQUFPSSxHQUNWTCxHQUFTTyxVQUFXRCxFQUFHRSxJQUFJQyxRQUFRLEdBQUdDLFdBRzlDQyxNQUFNVixNQUliVyxTQUFVLFNBQVNmLEdBQ2pCLEdBQUlnQixHQUFROUIsS0FBS2dCLE9BQU8sNERBQTZERixHQUNqRkMsRUFBTWYsS0FBS2dCLE9BQU9YLEVBQUtFLFVBQVVHLE1BQU9xQixtQkFBbUJELEdBRS9ELE9BQU8sSUFBSWxDLFNBQVEsU0FBU3FCLEVBQVNDLEdBQ25DZixFQUFFWSxHQUFNaUIsTUFBTSxJQUNYYixLQUFLLFNBQVNjLEdBQ2JoQixFQUFRZ0IsRUFBSUgsTUFBTUksV0FFbkJOLE1BQU1WLE1BSWJpQixrQkFBbUIsU0FBU3JCLEVBQVFzQixFQUFPQyxHQUN6QyxHQUFJUCxHQUFROUIsS0FBS2dCLE9BQU8seUdBQTBHRixFQUFRc0IsRUFBT0MsR0FDN0l0QixFQUFNZixLQUFLZ0IsT0FBT1gsRUFBS0UsVUFBVUUsZUFBZ0JzQixtQkFBbUJELEdBRXhFLE9BQU8sSUFBSWxDLFNBQVEsU0FBU3FCLEVBQVNDLEdBQ25DZixFQUFFWSxHQUFNaUIsTUFBTSxJQUNYYixLQUFLLFNBQVNjLEdBQ2JoQixHQUFTcUIsS0FBTUwsRUFBSUgsTUFBTUksUUFBUXhCLFVBRWxDa0IsTUFBTVYsTUFJYkosT0FBUSxTQUFTZ0IsR0FDZixHQUFJZixHQUFNZixLQUFLZ0IsT0FBT1gsRUFBS0UsVUFBVUksT0FBUW9CLG1CQUFtQkQsR0FFaEUsT0FBTyxJQUFJbEMsU0FBUSxTQUFTcUIsRUFBU0MsR0FDbkNmLEVBQUVZLEdBQU1pQixNQUFNLElBQ1hiLEtBQUssU0FBU2MsR0FDYmhCLEdBQ0VOLE9BQVFzQixFQUFJTSxVQUFVQyxNQUN0Qk4sUUFBU0QsRUFBSU0sVUFBVUUsZUFHMUJiLE1BQU1WLE9BS1JkLEdBQ05WIiwiZmlsZSI6InlhaG9vLmZpbmFuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcnAgPSByZXF1aXJlKCdyZXF1ZXN0LXByb21pc2UnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciB4bWwyanMgPSByZXF1aXJlKCd4bWwyanMnKTtcbnZhciBwYXJzZXIgPSBuZXcgeG1sMmpzLlBhcnNlcigpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKHIpIHtcbiAgdmFyIHNlbGY7XG5cbiAgZnVuY3Rpb24gWWFob29GaW5hbmNlQVBJKCkge1xuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5lbmRwb2ludHMgPSB7XG4gICAgICBmZWVkczogJ2h0dHBzOi8vZmVlZHMuZmluYW5jZS55YWhvby5jb20vcnNzLzIuMC9oZWFkbGluZT9zPSVzJnJlZ2lvbj1VUyZsYW5nPWVuLVVTJyxcbiAgICAgIGhpc3RvcmljYWxEYXRhOiAnaHR0cHM6Ly9xdWVyeS55YWhvb2FwaXMuY29tL3YxL3B1YmxpYy95cWw/cT0lcyZmb3JtYXQ9anNvbiZkaWFnbm9zdGljcz10cnVlJmVudj1zdG9yZSUzQSUyRiUyRmRhdGF0YWJsZXMub3JnJTJGYWxsdGFibGVzd2l0aGtleXMnLFxuICAgICAgcXVvdGU6ICdodHRwczovL3F1ZXJ5LnlhaG9vYXBpcy5jb20vdjEvcHVibGljL3lxbD9xPSVzJmZvcm1hdD1qc29uJmVudj1zdG9yZSUzQSUyRiUyRmRhdGF0YWJsZXMub3JnJTJGYWxsdGFibGVzd2l0aGtleXMnLFxuICAgICAgc2VhcmNoOiAnaHR0cDovL2QueWltZy5jb20vYXEvYXV0b2M/cXVlcnk9JXMmcmVnaW9uPVVTJmxhbmc9ZW4tVVMnXG4gICAgfVxuICB9XG5cbiAgWWFob29GaW5hbmNlQVBJLnByb3RvdHlwZSA9IHtcbiAgICBnZXRIZWFkbGluZXM6IGZ1bmN0aW9uKHRpY2tlcikge1xuICAgICAgdmFyIHVybCA9IHV0aWwuZm9ybWF0KHNlbGYuZW5kcG9pbnRzLmZlZWRzLCB0aWNrZXIpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHIodXJsKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHhtbCkge1xuICAgICAgICAgICAgcGFyc2VyLnBhcnNlU3RyaW5nKHhtbCwgZnVuY3Rpb24oZXJyLCBqcykge1xuICAgICAgICAgICAgICBpZihlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICBlbHNlIHJlc29sdmUoe2hlYWRsaW5lczoganMucnNzLmNoYW5uZWxbMF0uaXRlbX0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldFF1b3RlOiBmdW5jdGlvbih0aWNrZXIpIHtcbiAgICAgIHZhciBxdWVyeSA9IHV0aWwuZm9ybWF0KCdzZWxlY3QgKiBmcm9tIHlhaG9vLmZpbmFuY2UucXVvdGVzIHdoZXJlIHN5bWJvbCBpbiAoXCIlc1wiKScsIHRpY2tlcik7XG4gICAgICB2YXIgdXJsID0gdXRpbC5mb3JtYXQoc2VsZi5lbmRwb2ludHMucXVvdGUsIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSkpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHIodXJsLCB7anNvbjogdHJ1ZX0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlcy5xdWVyeS5yZXN1bHRzKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldEhpc3RvcmljYWxEYXRhOiBmdW5jdGlvbih0aWNrZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBxdWVyeSA9IHV0aWwuZm9ybWF0KCdzZWxlY3QgKiBmcm9tIHlhaG9vLmZpbmFuY2UuaGlzdG9yaWNhbGRhdGEgd2hlcmUgc3ltYm9sID0gXCIlc1wiIGFuZCBzdGFydERhdGUgPSBcIiVzXCIgYW5kIGVuZERhdGUgPSBcIiVzXCInLCB0aWNrZXIsIHN0YXJ0LCBlbmQpO1xuICAgICAgdmFyIHVybCA9IHV0aWwuZm9ybWF0KHNlbGYuZW5kcG9pbnRzLmhpc3RvcmljYWxEYXRhLCBlbmNvZGVVUklDb21wb25lbnQocXVlcnkpKTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByKHVybCwge2pzb246IHRydWV9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgcmVzb2x2ZSh7ZGF0YTogcmVzLnF1ZXJ5LnJlc3VsdHMucXVvdGV9KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHRpY2tlcjogZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgIHZhciB1cmwgPSB1dGlsLmZvcm1hdChzZWxmLmVuZHBvaW50cy5zZWFyY2gsIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSkpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHIodXJsLCB7anNvbjogdHJ1ZX0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgc2VhcmNoOiByZXMuUmVzdWx0U2V0LlF1ZXJ5LFxuICAgICAgICAgICAgICByZXN1bHRzOiByZXMuUmVzdWx0U2V0LlJlc3VsdCB8fCBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gWWFob29GaW5hbmNlQVBJO1xufSkocnApO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
